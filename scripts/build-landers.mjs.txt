// scripts/build-landers.mjs
import fs from "node:fs";
import path from "node:path";

const ROOT = process.cwd();
const DOCS = path.join(ROOT, "docs");
const OUT_COURSES = path.join(DOCS, "courses");
const OUT_CLASSES = path.join(DOCS, "classes");
const OUT_JOBS = path.join(DOCS, "jobs");

// --- load data ---
const courses = JSON.parse(fs.readFileSync(path.join(ROOT, "data", "courses.json"), "utf8"));
const jobs    = JSON.parse(fs.readFileSync(path.join(ROOT, "data", "jobs.json"), "utf8"));
const classes = JSON.parse(fs.readFileSync(path.join(ROOT, "data", "classes.json"), "utf8"));

const COURSE_MAP = Object.fromEntries(courses.map(c => [c.slug, c]));
const today = new Date();
const apex = "910cpr.com";
const coursesHost = `https://courses.${apex}`;
const enrollBase = "https://coastalcprtraining.enrollware.com/schedule";

// --- utils ---
const ensureDir = (p) => { fs.mkdirSync(p, { recursive: true }); };
const esc = (s) => String(s ?? "").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g,"&gt;");
const slug = (s) => (s||"").toLowerCase().replace(/[^a-z0-9]+/g,"-").replace(/(^-|-$)/g,"");

function layout({title, canonical, body, description=""}) {
  return `<!doctype html><html lang="en"><head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>${esc(title)}</title>
<meta name="description" content="${esc(description)}" />
<link rel="canonical" href="${esc(canonical)}" />
<link rel="stylesheet" href="/assets/style.css" />
<meta property="og:title" content="${esc(title)}" />
<meta property="og:description" content="${esc(description)}" />
<meta property="og:url" content="${esc(canonical)}" />
<meta property="og:type" content="website" />
</head><body>
<header><div class="wrap"><strong>910CPR</strong> · <a href="tel:+19103955193">Call/Text (910) 395-5193</a></div></header>
<main class="wrap">
${body}
</main>
<footer><div class="wrap">© 910CPR · AHA • Red Cross • HSI Approved Provider</div></footer>
</body></html>`;
}

function courseHtml(course) {
  const name = `${course.name} (${course.provider})`;
  const cta = `${enrollBase}${course.enrollware_anchor || ""}`;
  const canonical = `${coursesHost}/courses/${course.slug}.html`;
  const body = `
<section class="card">
  <h1>${esc(name)}</h1>
  <p>Instructor-led, local sessions. Same-day eCard.</p>
  <p>
    <a class="cta cta-primary" href="${esc(cta)}">See ${esc(course.slug.toUpperCase())} Dates</a>
    <a class="cta" href="${enrollBase}">Full Calendar</a>
  </p>
  <h2>Who takes this course?</h2>
  <ul>
    <li>Healthcare & public safety professionals</li>
    <li>Students with clinical requirements</li>
    <li>Employers needing OSHA-compliant training</li>
  </ul>
</section>`;
  return layout({
    title: `${course.slug.toUpperCase()} Certification & Renewal | 910CPR`,
    canonical,
    description: `${course.provider} ${course.name} classes & renewals. Fast, local, same-day eCard.`,
    body
  });
}

function classHtml(cls) {
  const course = COURSE_MAP[cls.course];
  const dt = new Date(`${cls.date}T${cls.time || "00:00"}:00`);
  const isFuture = dt >= today;
  const humanDate = dt.toLocaleString("en-US", {weekday:"short", month:"short", day:"numeric", year:"numeric", hour:"numeric", minute:"2-digit"});
  const title = `${course.name} — ${esc(cls.location)} — ${humanDate}`;
  const canonical = `${coursesHost}/classes/${cls.id}.html`;
  const cta = isFuture
    ? `<a class="cta cta-primary" href="${esc(cls.enroll_url)}">Register</a>
       <a class="cta" href="${enrollBase}${course.enrollware_anchor || ""}">More times</a>`
    : `<div class="card" style="background:#fffbe6;border-color:#f3e48a">
         <strong>Past class:</strong> This session has ended.
         <div style="margin-top:8px">
           <a class="cta cta-primary" href="${coursesHost}/courses/${course.slug}.html">See ${esc(course.slug.toUpperCase())} course options</a>
         </div>
       </div>`;

  const body = `
<section class="card">
  <h1>${esc(title)}</h1>
  <p class="muted">Location: ${esc(cls.location)}</p>
  <p>${isFuture ? "Hands-on session. Same-day eCard." : "This page remains for reference."}</p>
  <p>${cta}</p>
</section>`;
  return layout({
    title: `${course.slug.toUpperCase()} Class — ${esc(cls.location)} — ${humanDate} | 910CPR`,
    canonical,
    description: `${course.name} session in ${cls.location} on ${humanDate}. ${isFuture ? "Register online." : "See current course options."}`,
    body
  });
}

function jobHtml(job) {
  const course = COURSE_MAP[job.course];
  const canonical = `${coursesHost}/jobs/${job.slug}.html`;
  const body = `
<section class="card">
  <h1>${esc(job.title)}</h1>
  <p>Get the certification most ${esc(job.title.toLowerCase())} roles require.</p>
  <p>
    <a class="cta cta-primary" href="${coursesHost}/courses/${course.slug}.html">See ${esc(course.slug.toUpperCase())} Course</a>
    <a class="cta" href="${enrollBase}${course.enrollware_anchor || ""}">Upcoming Dates</a>
  </p>
</section>`;
  return layout({
    title: `${job.title} — CPR/First Aid Training | 910CPR`,
    canonical,
    description: `Certification options for ${job.title.toLowerCase()}. Local classes, same-day eCard.`,
    body
  });
}

// --- build ---
ensureDir(OUT_COURSES);
ensureDir(OUT_CLASSES);
ensureDir(OUT_JOBS);

// courses
for (const c of courses) {
  const html = courseHtml(c);
  fs.writeFileSync(path.join(OUT_COURSES, `${c.slug}.html`), html, "utf8");
}

// classes
for (const cl of classes) {
  const html = classHtml(cl);
  fs.writeFileSync(path.join(OUT_CLASSES, `${cl.id}.html`), html, "utf8");
}

// jobs
for (const j of jobs) {
  const html = jobHtml(j);
  fs.writeFileSync(path.join(OUT_JOBS, `${j.slug}.html`), html, "utf8");
}

// sitemap
function sitemapUrls() {
  const urls = [];
  // course pages
  for (const c of courses) urls.push(`${coursesHost}/courses/${c.slug}.html`);
  // class pages
  for (const cl of classes) urls.push(`${coursesHost}/classes/${cl.id}.html`);
  // job pages
  for (const j of jobs) urls.push(`${coursesHost}/jobs/${j.slug}.html`);
  return urls;
}
const lastmod = new Date().toISOString().slice(0,10);
const xml = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${sitemapUrls().map(u => `  <url><loc>${u}</loc><lastmod>${lastmod}</lastmod><changefreq>daily</changefreq><priority>0.6</priority></url>`).join("\n")}
</urlset>`;
fs.writeFileSync(path.join(DOCS, "sitemap.xml"), xml, "utf8");

console.log("✅ Built courses, classes, jobs, and sitemap.");
